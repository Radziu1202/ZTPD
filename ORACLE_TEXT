zadanie 1
CREATE TABLE CYTATY AS SELECT * FROM ZSBD_TOOLS.CYTATY;
SELECT * FROM CYTATY;

zadanie 2
SELECT AUTOR, TEKST
FROM CYTATY
WHERE UPPER(TEKST) LIKE '%PESYMISTA%' AND UPPER(TEKST) LIKE '%OPTYMISTA%';


zadanie 3
CREATE INDEX C_T_INDEX
ON CYTATY(TEKST) INDEXTYPE IS CTXSYS.CONTEXT;

zadanie 4
SELECT * FROM CYTATY
WHERE CONTAINS(TEKST, 'PESYMISTA') > 0
AND CONTAINS(TEKST, 'OPTYMISTA') > 0;

zadanie 5
SELECT * FROM CYTATY
WHERE CONTAINS(TEKST, 'PESYMISTA') > 0
AND CONTAINS(TEKST, 'OPTYMISTA') = 0;

zadanie 6
SELECT AUTOR,TEKST FROM CYTATY
WHERE CONTAINS(TEKST,'NEAR((PESYMISTA, OPTYMISTA),3)') > 0;

zadanie 7
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST,'NEAR((PESYMISTA, OPTYMISTA),10)') > 0;


zadanie 8
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST, 'życi%', 1) > 0;

zadanie 9
SELECT AUTOR, TEKST, SCORE(1) FROM CYTATY
WHERE CONTAINS(TEKST, 'życi%', 1) > 0;

zadanie 10
SELECT AUTOR, TEKST, SCORE(1) AS DOPASOWANIE FROM CYTATY
WHERE CONTAINS(TEKST, 'życi%', 1) > 0
AND ROWNUM = 1
ORDER BY DOPASOWANIE DESC;

zadanie 11
SELECT * FROM CYTATY
WHERE CONTAINS(TEKST, '?probelm') > 0;

zadanie 12
INSERT INTO CYTATY
	 VALUES(
    	50,
    	'Bertrand Russell',
    	'To smutne, że głupcy sś tacy pewni siebie, a ludzie rozsądni tacy pełni wątpliwości.'
	);
COMMIT;


zadanie 13
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST,'głupcy', 1) > 0;

Index został utworzony zannim rekord z zadania 12 został dodany do tablicy. 

zadanie 14
SELECT * FROM DR$C_T_INDEX$I
WHERE TOKEN_TEXT = 'głupcy';

zadanie 15
DROP INDEX C_T_INDEX;

CREATE INDEX C_T_INDEX
ON CYTATY(TEKST) INDEXTYPE IS CTXSYS.CONTEXT;


zadanie 16
SELECT AUTOR, TEKST FROM CYTATY
WHERE CONTAINS(TEKST,'głupcy', 1) > 0;

zadanie 17
DROP INDEX C_T_INDEX;

DROP TABLE CYTATY;


--------------------------------------------------------------CZESC DRUGA ----------------------------------

zadanie 1
CREATE TABLE QUOTES AS SELECT * FROM ZSBD_TOOLS.QUOTES;

zadanie 2
CREATE INDEX Q_T_INDEX ON QUOTES(TEXT)
INDEXTYPE IS CTXSYS.CONTEXT;

zadanie 3
SELECT TEXT FROM QUOTES
WHERE CONTAINS(TEXT,'work', 1) > 0;

SELECT TEXT FROM QUOTES
WHERE CONTAINS(TEXT,'$work', 1) > 0;

SELECT TEXT FROM QUOTES
WHERE CONTAINS(TEXT,'working’', 1) > 0;

SELECT  TEXT FROM QUOTES
WHERE CONTAINS(TEXT,'$working’', 1) > 0;

zadanie 4
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT,'it', 1) > 0;

słowo po którym szukamy znajduje się w liście stoplist

zadanie 5
SELECT * FROM CTX_STOPLISTS;

system wykorzystywal DEFAULT_STOPLIST

zadanie 6
SELECT * FROM CTX_STOPWORDS;

zadanie 7
DROP INDEX Q_T_INDEX;


CREATE INDEX Q_T_INDEX ON QUOTES(TEXT)
INDEXTYPE IS CTXSYS.CONTEXT
PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST');

ZADANIE 8
SELECT * FROM QUOTES
WHERE CONTAINS(TEXT, 'it', 1) > 0;

TYM RAZEM SYSTEM ZWROCIŁ WYNIKI

ZADANIE 9
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'fool') > 0 AND CONTAINS(TEXT, 'humans') > 0;

ZADANIE 10
SELECT AUTHOR, TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'fool') > 0 AND CONTAINS(TEXT, 'computer') > 0;

ZADANEI 11
SELECT * FROM QUOTES
WHERE CONTAINS(TEXT,'(fool and humans) WITHIN SENTENCE', 1) > 0;

nie wystepuje takie zdanie

ZADANIE 12
DROP INDEX Q_T_INDEX;

ZADANIE 13
BEGIN
ctx_ddl.create_section_group('nullgroup', 'NULL_SECTION_GROUP');
ctx_ddl.add_special_section('nullgroup',  'SENTENCE');
ctx_ddl.add_special_section('nullgroup',  'PARAGRAPH');
END;


ZADANIE 14
CREATE INDEX Q_T_INDEX ON QUOTES(TEXT) INDEXTYPE IS CTXSYS.CONTEXT
PARAMETERS ('section group nullgroup');


ZADANIE 15
SELECT  TEXT FROM QUOTES
WHERE CONTAINS(TEXT, '(fool AND humans) WITHIN SENTENCE', 1) > 0;

SELECT  TEXT FROM QUOTES
WHERE CONTAINS(TEXT, '(fool AND computer) WITHIN SENTENCE', 1) > 0;

ZADANIE 16
SELECT  TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'humans', 1) > 0;

System zwrócił też cytaty zawierające ‘non-humans’, wynika to z ustawień lexera


ZADANIE 17
DROP INDEX Q_T_INDEX;

BEGIN
ctx_ddl.create_preference('lexer','BASIC_LEXER');
ctx_ddl.set_attribute('lexer', 'printjoins', '-');
ctx_ddl.set_attribute('lexer', 'index_text', 'YES');
END;


CREATE INDEX Q_T_INDEX ON QUOTES(TEXT) INDEXTYPE IS CTXSYS.CONTEXT
PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST section group nullgroup LEXER lexer');


ZADANIE 18
SELECT  TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'humans', 1) > 0;

ZADANIE 19
SELECT  TEXT FROM QUOTES
WHERE CONTAINS(TEXT, 'non\-humans', 1) > 0;

ZADANIE 20
DROP TABLE QUOTES;

