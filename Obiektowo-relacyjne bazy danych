zadanie 1
create type SAMOCHOD AS object(
MARKA VARCHAR2(20),
MODEL VARCHAR2(20),
KILOMETRY NUMBER,
DATA_PRODUKCJI DATE,
CENA NUMBER(10,2)
);

create Table SAMOCHODY OF SAMOCHOD;

INSERT INTO SAMOCHODY VALUES(
NEW SAMOCHOD('fiat','BRAVA',60000,DATE '1999-11-30',25000)
);

INSERT INTO SAMOCHODY VALUES(
NEW SAMOCHOD('MAZDA','323',12000,DATE '1997-11-30',52000)
);


INSERT INTO SAMOCHODY VALUES(
NEW SAMOCHOD('FORD','MONDEO',80000,DATE '1998-11-30',45000)
);


zadanie 2

create Table WLASCICIELE(
IMIE VARCHAR(100),
NAZWISKO VARCHAR(100),
AUTO SAMOCHOD
);

INSERT INTO WLASCICIELE VALUES( 
'JAN', 'KOWALSKI', NEW SAMOCHOD('FIAT', 'SEICENTO', 30000, DATE'0010-12-02', 19500)
);


INSERT INTO WLASCICIELE VALUES( 
'ADAM', 'NOWAK',NEW SAMOCHOD('OPEL', 'ASTRA', 34000, DATE'0009-06-01', 33700)
);



ZADANIE 3 
ALTER type SAMOCHOD
    ADD member function WARTOSC
   return number CASCADE;

create OR REPLACE type body SAMOCHOD  as
        member function WARTOSC RETURN NUMBER IS
    n_of_years NUMBER;
    price NUMBER := CENA;
    BEGIN
        n_of_years :=EXTRACT(YEAR FROM sysdate) -EXTRACT(YEAR FROM DATA_PRODUKCJI);
        FOR rok in 1..n_of_years loop
        price := price *0.9;
        end loop;
    RETURN price;

    END WARTOSC;
END;


zadanie 4

ALTER TYPE SAMOCHOD ADD MAP MEMBER FUNCTION odwzoruj
RETURN NUMBER CASCADE INCLUDING TABLE DATA

create or replace type body SAMOCHOD  as

     member function WARTOSC RETURN NUMBER IS
    n_of_years NUMBER;
    price NUMBER := CENA;
    BEGIN
        n_of_years :=EXTRACT(YEAR FROM sysdate) -EXTRACT(YEAR FROM DATA_PRODUKCJI);
        FOR rok in 1..n_of_years loop
        price := price *0.9;
        end loop;
    RETURN price;

    END WARTOSC;
    
    
    MAP MEMBER FUNCTION odwzoruj RETURN NUMBER IS
    begin 
        return EXTRACT(YEAR FROM sysdate) -EXTRACT(YEAR FROM DATA_PRODUKCJI) + KILOMETRY/1000;
    end odwzoruj;
END;

   
zadanie 5 

create type WLASCICIEL AS object(
IMIE VARCHAR(100),
NAZWISKO VARCHAR(100)
);


 ALTER TYPE SAMOCHOD 
   ADD ATTRIBUTE (wlasciciell REF WLASCICIEL) CASCADE

ZADANIE 6
   
DECLARE
    TYPE T_PRZEDMIOTY IS VARRAY(10) OF VARCHAR2(20);
    MOJE_PRZEDMIOTY T_PRZEDMIOTY := T_PRZEDMIOTY('');
BEGIN
    MOJE_PRZEDMIOTY(1) := 'MATEMATYKA';
    MOJE_PRZEDMIOTY.EXTEND(9);
    FOR I IN 2..10 LOOP
        MOJE_PRZEDMIOTY(I) := 'PRZEDMIOT_' || I;
    END LOOP;
    
    FOR I IN MOJE_PRZEDMIOTY.FIRST()..MOJE_PRZEDMIOTY.LAST() LOOP
        DBMS_OUTPUT.PUT_LINE(MOJE_PRZEDMIOTY(I));
    END LOOP;

    MOJE_PRZEDMIOTY.TRIM(2);
    FOR I IN MOJE_PRZEDMIOTY.FIRST()..MOJE_PRZEDMIOTY.LAST() LOOP
        DBMS_OUTPUT.PUT_LINE(MOJE_PRZEDMIOTY(I));
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('LIMIT: ' || MOJE_PRZEDMIOTY.LIMIT());
    DBMS_OUTPUT.PUT_LINE('LICZBA ELEMENTOW: ' || MOJE_PRZEDMIOTY.COUNT());
    
    MOJE_PRZEDMIOTY.EXTEND();
    MOJE_PRZEDMIOTY(9) := 9;
    
    DBMS_OUTPUT.PUT_LINE('LIMIT: ' || MOJE_PRZEDMIOTY.LIMIT());
    DBMS_OUTPUT.PUT_LINE('LICZBA ELEMENTOW: ' || MOJE_PRZEDMIOTY.COUNT());
    
    MOJE_PRZEDMIOTY.DELETE();
    
    DBMS_OUTPUT.PUT_LINE('LIMIT: ' || MOJE_PRZEDMIOTY.LIMIT());
    DBMS_OUTPUT.PUT_LINE('LICZBA ELEMENTOW: ' || MOJE_PRZEDMIOTY.COUNT());
END;  

ZADANIE 7

DECLARE
    TYPE T_KSIAZKI IS VARRAY(10) OF VARCHAR2(20);
    KOLEKCJA_KSIAZKI T_KSIAZKI := T_KSIAZKI('');
BEGIN
    KOLEKCJA_KSIAZKI(1) := 'INTRESTING BOOK';
    KOLEKCJA_KSIAZKI.EXTEND(9);
    FOR I IN 2..10 LOOP
        KOLEKCJA_KSIAZKI(I) := 'KSIAZKA ' || I;
    END LOOP;
    FOR I IN KOLEKCJA_KSIAZKI.FIRST()..KOLEKCJA_KSIAZKI.LAST() LOOP
        DBMS_OUTPUT.PUT_LINE(KOLEKCJA_KSIAZKI(I));
    END LOOP;
        KOLEKCJA_KSIAZKI.TRIM(2);
    FOR I IN KOLEKCJA_KSIAZKI.FIRST()..KOLEKCJA_KSIAZKI.LAST() LOOP
        DBMS_OUTPUT.PUT_LINE(KOLEKCJA_KSIAZKI(I));
    END LOOP;
    
        DBMS_OUTPUT.PUT_LINE('LIMIT: ' || KOLEKCJA_KSIAZKI.LIMIT());
    DBMS_OUTPUT.PUT_LINE('LICZBA ELEMENTOW: ' || KOLEKCJA_KSIAZKI.COUNT());

    KOLEKCJA_KSIAZKI.EXTEND();
    KOLEKCJA_KSIAZKI(9) := 9;

    DBMS_OUTPUT.PUT_LINE('LIMIT: ' || KOLEKCJA_KSIAZKI.LIMIT());
    DBMS_OUTPUT.PUT_LINE('LICZBA ELEMENTOW: ' || KOLEKCJA_KSIAZKI.COUNT());

    KOLEKCJA_KSIAZKI.DELETE();
    
    DBMS_OUTPUT.PUT_LINE('LIMIT: ' || KOLEKCJA_KSIAZKI.LIMIT());
    DBMS_OUTPUT.PUT_LINE('LICZBA ELEMENTOW: ' || KOLEKCJA_KSIAZKI.COUNT());

END;


ZADANIE 8

DECLARE
 TYPE t_wykladowcy IS TABLE OF VARCHAR2(20);
 moi_wykladowcy t_wykladowcy := t_wykladowcy();
BEGIN
 moi_wykladowcy.EXTEND(2);
 moi_wykladowcy(1) := 'MORZY';
 moi_wykladowcy(2) := 'WOJCIECHOWSKI';
 moi_wykladowcy.EXTEND(8);
 FOR i IN 3..10 LOOP
 moi_wykladowcy(i) := 'WYKLADOWCA_' || i;
 END LOOP;
 FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
 DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
 END LOOP;
 moi_wykladowcy.TRIM(2);
 FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
 DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
 END LOOP;
 moi_wykladowcy.DELETE(5,7);
 DBMS_OUTPUT.PUT_LINE('Limit: ' || moi_wykladowcy.LIMIT());
 DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moi_wykladowcy.COUNT());
 FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
 IF moi_wykladowcy.EXISTS(i) THEN
 DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
 END IF;
 END LOOP;
 moi_wykladowcy(5) := 'ZAKRZEWICZ';
 moi_wykladowcy(6) := 'KROLIKOWSKI';
 moi_wykladowcy(7) := 'KOSZLAJDA';
 FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
 IF moi_wykladowcy.EXISTS(i) THEN
 DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
 END IF;
 END LOOP;
 DBMS_OUTPUT.PUT_LINE('Limit: ' || moi_wykladowcy.LIMIT());
 DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moi_wykladowcy.COUNT());
END;

ZADANIE 9

DECLARE
TYPE T_MIESIACE IS TABLE OF VARCHAR2(20);
KOLEKCJA_MIESIACE T_MIESIACE := T_MIESIACE();
BEGIN
    KOLEKCJA_MIESIACE.EXTEND(12);
    KOLEKCJA_MIESIACE(12) := 'GRUDZIEN';
    KOLEKCJA_MIESIACE(11) := 'LISTOPAD';
    KOLEKCJA_MIESIACE(10) := 'PIZDZIERNIK';
    KOLEKCJA_MIESIACE(9) := 'WRZESIEN';
    KOLEKCJA_MIESIACE(8) := 'SIERPIEN';
    KOLEKCJA_MIESIACE(7) := 'LIPIEC';
    KOLEKCJA_MIESIACE(6) := 'CZERWIEC';
    KOLEKCJA_MIESIACE(5) := 'MAJ';
    KOLEKCJA_MIESIACE(4) := 'APRIL';
    KOLEKCJA_MIESIACE(3) := 'MARZEC';
    KOLEKCJA_MIESIACE(2) := 'LUTY';
    KOLEKCJA_MIESIACE(1) := 'STYCZEN';

    FOR I IN KOLEKCJA_MIESIACE.FIRST()..KOLEKCJA_MIESIACE.LAST() LOOP
        DBMS_OUTPUT.PUT_LINE(KOLEKCJA_MIESIACE(I));
    END LOOP;
    
    KOLEKCJA_MIESIACE.TRIM(2);
    
    FOR I IN KOLEKCJA_MIESIACE.FIRST()..KOLEKCJA_MIESIACE.LAST() LOOP
        DBMS_OUTPUT.PUT_LINE(KOLEKCJA_MIESIACE(I));
    END LOOP;
    
    KOLEKCJA_MIESIACE.DELETE(5,7);
    DBMS_OUTPUT.PUT_LINE('LIMIT: ' || KOLEKCJA_MIESIACE.LIMIT());
    DBMS_OUTPUT.PUT_LINE('LICZBA ELEMENTOW: ' || KOLEKCJA_MIESIACE.COUNT());

    FOR I IN KOLEKCJA_MIESIACE.FIRST()..KOLEKCJA_MIESIACE.LAST() LOOP
        IF KOLEKCJA_MIESIACE.EXISTS(I) THEN
            DBMS_OUTPUT.PUT_LINE(KOLEKCJA_MIESIACE(I));
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('LIMIT: ' || KOLEKCJA_MIESIACE.LIMIT());
    DBMS_OUTPUT.PUT_LINE('LICZBA ELEMENTOW: ' || KOLEKCJA_MIESIACE.COUNT());
END;


ZADANIE 10

CREATE TYPE jezyki_obce AS VARRAY(10) OF VARCHAR2(20);
/
CREATE TYPE stypendium AS OBJECT (
 nazwa VARCHAR2(50),
 kraj VARCHAR2(30),
 jezyki jezyki_obce );
/
CREATE TABLE stypendia OF stypendium;
INSERT INTO stypendia VALUES
('SOKRATES','FRANCJA',jezyki_obce('ANGIELSKI','FRANCUSKI','NIEMIECKI'));
INSERT INTO stypendia VALUES
('ERASMUS','NIEMCY',jezyki_obce('ANGIELSKI','NIEMIECKI','HISZPANSKI'));
SELECT * FROM stypendia;
SELECT s.jezyki FROM stypendia s;
UPDATE STYPENDIA
SET jezyki = jezyki_obce('ANGIELSKI','NIEMIECKI','HISZPANSKI','FRANCUSKI')
WHERE nazwa = 'ERASMUS';
CREATE TYPE lista_egzaminow AS TABLE OF VARCHAR2(20);
/
CREATE TYPE semestr AS OBJECT (
 numer NUMBER,
 egzaminy lista_egzaminow );
/
CREATE TABLE semestry OF semestr
NESTED TABLE egzaminy STORE AS tab_egzaminy;
INSERT INTO semestry VALUES
(semestr(1,lista_egzaminow('MATEMATYKA','LOGIKA','ALGEBRA')));
INSERT INTO semestry VALUES
(semestr(2,lista_egzaminow('BAZY DANYCH','SYSTEMY OPERACYJNE')));
SELECT s.numer, e.*
FROM semestry s, TABLE(s.egzaminy) e;
SELECT e.*
FROM semestry s, TABLE ( s.egzaminy ) e;
SELECT * FROM TABLE ( SELECT s.egzaminy FROM semestry s WHERE numer=1 );
INSERT INTO TABLE ( SELECT s.egzaminy FROM semestry s WHERE numer=2 )
VALUES ('METODY NUMERYCZNE');
UPDATE TABLE ( SELECT s.egzaminy FROM semestry s WHERE numer=2 ) e
SET e.column_value = 'SYSTEMY ROZPROSZONE'
WHERE e.column_value = 'SYSTEMY OPERACYJNE';
DELETE FROM TABLE ( SELECT s.egzaminy FROM semestry s WHERE numer=2 ) e
WHERE e.column_value = 'BAZY DANYCH';


ZADANIE 11

CREATE TYPE KOSZYK_PRODUKTOW3 AS TABLE OF VARCHAR(100);
/
CREATE TABLE ZAKUPY (ZAK KOSZYK_PRODUKTOW3) NESTED TABLE ZAK STORE AS LISTA_ZAKUPOW;

INSERT INTO ZAKUPY VALUES (NEW KOSZYK_PRODUKTOW3('MLEKO', 'SER'));
INSERT INTO ZAKUPY VALUES (NEW KOSZYK_PRODUKTOW3('MAKA'));
INSERT INTO ZAKUPY VALUES (NEW KOSZYK_PRODUKTOW3('CHLEB'));

DELETE FROM ZAKUPY a
WHERE (SELECT COUNT(*) FROM TABLE (a.ZAK) b WHERE b.COLUMN_VALUE = 'MAKA') > 0;

ZADANIE 12
CREATE TYPE instrument AS OBJECT (
 nazwa VARCHAR2(20),
 dzwiek VARCHAR2(20),
 MEMBER FUNCTION graj RETURN VARCHAR2 ) NOT FINAL;
 /
CREATE TYPE BODY instrument AS
 MEMBER FUNCTION graj RETURN VARCHAR2 IS
 BEGIN
 RETURN dzwiek;
 END;
END;
/
CREATE TYPE instrument_dety UNDER instrument (
 material VARCHAR2(20),
 OVERRIDING MEMBER FUNCTION graj RETURN VARCHAR2,
 MEMBER FUNCTION graj(glosnosc VARCHAR2) RETURN VARCHAR2 );
 /
CREATE OR REPLACE TYPE BODY instrument_dety AS
 OVERRIDING MEMBER FUNCTION graj RETURN VARCHAR2 IS
 BEGIN
 RETURN 'dmucham: '||dzwiek;
 END;
 MEMBER FUNCTION graj(glosnosc VARCHAR2) RETURN VARCHAR2 IS
 BEGIN
 RETURN glosnosc||':'||dzwiek;
 END;
END;
/
CREATE TYPE instrument_klawiszowy UNDER instrument (
 producent VARCHAR2(20),
 OVERRIDING MEMBER FUNCTION graj RETURN VARCHAR2 );
CREATE OR REPLACE TYPE BODY instrument_klawiszowy AS
 OVERRIDING MEMBER FUNCTION graj RETURN VARCHAR2 IS
 BEGIN
 RETURN 'stukam w klawisze: '||dzwiek;
 END;
END;
/
DECLARE
 tamburyn instrument := instrument('tamburyn','brzdek-brzdek');
 trabka instrument_dety := instrument_dety('trabka','tra-ta-ta','metalowa');
 fortepian instrument_klawiszowy := instrument_klawiszowy('fortepian','pingping','steinway');
BEGIN
 dbms_output.put_line(tamburyn.graj);
 dbms_output.put_line(trabka.graj);
 dbms_output.put_line(trabka.graj('glosno'));
 dbms_output.put_line(fortepian.graj);
END;


zadanie 13
CREATE TYPE istota AS OBJECT (
 nazwa VARCHAR2(20),
 NOT INSTANTIABLE MEMBER FUNCTION poluj(ofiara CHAR) RETURN CHAR )
 NOT INSTANTIABLE NOT FINAL;
CREATE TYPE lew UNDER istota (
 liczba_nog NUMBER,
 OVERRIDING MEMBER FUNCTION poluj(ofiara CHAR) RETURN CHAR );
CREATE OR REPLACE TYPE BODY lew AS
 OVERRIDING MEMBER FUNCTION poluj(ofiara CHAR) RETURN CHAR IS
 BEGIN
 RETURN 'upolowana ofiara: '||ofiara;
 END;
END;
DECLARE
 KrolLew lew := lew('LEW',4);
 InnaIstota istota := istota('JAKIES ZWIERZE');
BEGIN
 DBMS_OUTPUT.PUT_LINE( KrolLew.poluj('antylopa') );
END;

zadanie 14

DECLARE
 tamburyn instrument;
 cymbalki instrument;
 trabka instrument_dety;
 saksofon instrument_dety;
BEGIN
 tamburyn := instrument('tamburyn','brzdek-brzdek');
 cymbalki := instrument_dety('cymbalki','ding-ding','metalowe');
 trabka := instrument_dety('trabka','tra-ta-ta','metalowa');
 -- saksofon := instrument('saksofon','tra-taaaa');
 -- saksofon := TREAT( instrument('saksofon','tra-taaaa') AS instrument_dety);
END;


ZADANIE 15
CREATE TABLE instrumenty OF instrument;
INSERT INTO instrumenty VALUES ( instrument('tamburyn','brzdek-brzdek') );
INSERT INTO instrumenty VALUES ( instrument_dety('trabka','tra-ta-ta','metalowa')
);
INSERT INTO instrumenty VALUES ( instrument_klawiszowy('fortepian','pingping','steinway') );
SELECT i.nazwa, i.graj() FROM instrumenty i;


ZADANIE 16
CREATE TABLE PRZEDMIOTY (
 NAZWA VARCHAR2(50),
 NAUCZYCIEL NUMBER REFERENCES PRACOWNICY(ID_PRAC)
);
INSERT INTO PRZEDMIOTY VALUES ('BAZY DANYCH',100);
INSERT INTO PRZEDMIOTY VALUES ('SYSTEMY OPERACYJNE',100);
INSERT INTO PRZEDMIOTY VALUES ('PROGRAMOWANIE',110);
INSERT INTO PRZEDMIOTY VALUES ('SIECI KOMPUTEROWE',110);
INSERT INTO PRZEDMIOTY VALUES ('BADANIA OPERACYJNE',120);
INSERT INTO PRZEDMIOTY VALUES ('GRAFIKA KOMPUTEROWA',120);
INSERT INTO PRZEDMIOTY VALUES ('BAZY DANYCH',130);
INSERT INTO PRZEDMIOTY VALUES ('SYSTEMY OPERACYJNE',140);
INSERT INTO PRZEDMIOTY VALUES ('PROGRAMOWANIE',140);
INSERT INTO PRZEDMIOTY VALUES ('SIECI KOMPUTEROWE',140);
INSERT INTO PRZEDMIOTY VALUES ('BADANIA OPERACYJNE',150);
INSERT INTO PRZEDMIOTY VALUES ('GRAFIKA KOMPUTEROWA',150);
INSERT INTO PRZEDMIOTY VALUES ('BAZY DANYCH',160);
INSERT INTO PRZEDMIOTY VALUES ('SYSTEMY OPERACYJNE',160);
INSERT INTO PRZEDMIOTY VALUES ('PROGRAMOWANIE',170);
INSERT INTO PRZEDMIOTY VALUES ('SIECI KOMPUTEROWE',180);
INSERT INTO PRZEDMIOTY VALUES ('BADANIA OPERACYJNE',180);
INSERT INTO PRZEDMIOTY VALUES ('GRAFIKA KOMPUTEROWA',190);
INSERT INTO PRZEDMIOTY VALUES ('GRAFIKA KOMPUTEROWA',200);
INSERT INTO PRZEDMIOTY VALUES ('GRAFIKA KOMPUTEROWA',210);
INSERT INTO PRZEDMIOTY VALUES ('PROGRAMOWANIE',220);
INSERT INTO PRZEDMIOTY VALUES ('SIECI KOMPUTEROWE',220);
INSERT INTO PRZEDMIOTY VALUES ('BADANIA OPERACYJNE',230);

ZADANIE 17
CREATE TYPE ZESPOL AS OBJECT (
 ID_ZESP NUMBER,
 NAZWA VARCHAR2(50),
 ADRES VARCHAR2(100)
);

ZADANIE 18
CREATE OR REPLACE VIEW ZESPOLY_V OF ZESPOL
WITH OBJECT IDENTIFIER(ID_ZESP)
AS SELECT ID_ZESP, NAZWA, ADRES FROM ZESPOLY;

ZADANIE 19

CREATE TYPE PRZEDMIOTY_TAB AS TABLE OF VARCHAR2(100);
/
CREATE TYPE PRACOWNIK AS OBJECT (
 ID_PRAC NUMBER,
 NAZWISKO VARCHAR2(30),
 ETAT VARCHAR2(20),
 ZATRUDNIONY DATE,
 PLACA_POD NUMBER(10,2),
 MIEJSCE_PRACY REF ZESPOL,
 PRZEDMIOTY PRZEDMIOTY_TAB,
 MEMBER FUNCTION ILE_PRZEDMIOTOW RETURN NUMBER
);
/
CREATE OR REPLACE TYPE BODY PRACOWNIK AS
 MEMBER FUNCTION ILE_PRZEDMIOTOW RETURN NUMBER IS
 BEGIN
 RETURN PRZEDMIOTY.COUNT();
 END ILE_PRZEDMIOTOW;
END;

ZADANIE 20
CREATE OR REPLACE VIEW PRACOWNICY_V OF PRACOWNIK
WITH OBJECT IDENTIFIER (ID_PRAC)
AS SELECT ID_PRAC, NAZWISKO, ETAT, ZATRUDNIONY, PLACA_POD,
 MAKE_REF(ZESPOLY_V,ID_ZESP),
 CAST(MULTISET( SELECT NAZWA FROM PRZEDMIOTY WHERE NAUCZYCIEL=P.ID_PRAC ) AS
PRZEDMIOTY_TAB )
FROM PRACOWNICY P;

ZADANIE 21
SELECT *
FROM PRACOWNICY_V;
SELECT P.NAZWISKO, P.ETAT, P.MIEJSCE_PRACY.NAZWA
FROM PRACOWNICY_V P;
SELECT P.NAZWISKO, P.ILE_PRZEDMIOTOW()
FROM PRACOWNICY_V P;
SELECT *
FROM TABLE( SELECT PRZEDMIOTY FROM PRACOWNICY_V WHERE NAZWISKO='WEGLARZ' );
SELECT NAZWISKO, CURSOR( SELECT PRZEDMIOTY
FROM PRACOWNICY_V
WHERE ID_PRAC=P.ID_PRAC)
FROM PRACOWNICY_V P;


ZADANIE 22

CREATE TABLE PISARZE (
 ID_PISARZA NUMBER PRIMARY KEY,
 NAZWISKO VARCHAR2(20),
 DATA_UR DATE );
CREATE TABLE KSIAZKI (
 ID_KSIAZKI NUMBER PRIMARY KEY,
 ID_PISARZA NUMBER NOT NULL REFERENCES PISARZE,
 TYTUL VARCHAR2(50),
 DATA_WYDANIE DATE );
INSERT INTO PISARZE VALUES(10,'SIENKIEWICZ',DATE '1880-01-01');
INSERT INTO PISARZE VALUES(20,'PRUS',DATE '1890-04-12');
INSERT INTO PISARZE VALUES(30,'ZEROMSKI',DATE '1899-09-11');
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(10,10,'OGNIEM I MIECZEM',DATE '1990-01-05');
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(20,10,'POTOP',DATE '1975-12-09');
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(30,10,'PAN WOLODYJOWSKI',DATE '1987-02-15');
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(40,20,'FARAON',DATE '1948-01-21');
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(50,20,'LALKA',DATE '1994-08-01');
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(60,30,'PRZEDWIOSNIE',DATE '1938-02-02');

ZADANIE 23
CREATE TYPE AUTO AS OBJECT (
 MARKA VARCHAR2(20),
 MODEL VARCHAR2(20),
 KILOMETRY NUMBER,
 DATA_PRODUKCJI DATE,
 CENA NUMBER(10,2),
 MEMBER FUNCTION WARTOSC RETURN NUMBER
);
/
CREATE OR REPLACE TYPE BODY AUTO AS
 MEMBER FUNCTION WARTOSC RETURN NUMBER IS
 WIEK NUMBER;
 WARTOSC NUMBER;
 BEGIN
 WIEK := ROUND(MONTHS_BETWEEN(SYSDATE,DATA_PRODUKCJI)/12);
 WARTOSC := CENA - (WIEK * 0.1 * CENA);
 IF (WARTOSC < 0) THEN
 WARTOSC := 0;
 END IF;
 RETURN WARTOSC;
 END WARTOSC;
END;
/
CREATE TABLE AUTA OF AUTO;
INSERT INTO AUTA VALUES (AUTO('FIAT','BRAVA',60000,DATE '1999-11-30',25000));
INSERT INTO AUTA VALUES (AUTO('FORD','MONDEO',80000,DATE '1997-05-10',45000));
INSERT INTO AUTA VALUES (AUTO('MAZDA','323',12000,DATE '2000-09-22',52000));

CREATE OR REPLACE TYPE AUTO_OSOBOWE UNDER AUTO
(
MIEJSCA NUMBER,
KLIMA VARCHAR(10),
OVERRIDING MEMBER FUNCTION WARTOSC RETURN NUMBER
);
/
CREATE OR REPLACE TYPE BODY AUTO_OSOBOWE AS OVERRIDING MEMBER FUNCTION WARTOSC RETURN NUMBER IS
START_VALUE NUMBER;
BEGIN
START_VALUE := (SELF AS AUTO).WARTOSC();
IF KLIMA = 'TRUE' THEN
RETURN START_VALUE + START_VALUE* 0.5;
END IF;
RETURN START_VALUE;
END;
END;
/
INSERT INTO AUTA VALUES (AUTO_OSOBOWE('FIAT2', 'BRAVA', 60000, DATE '1999-11-30', 25000,5, 'TRUE'));
INSERT INTO AUTA VALUES (AUTO_OSOBOWE('FIAT', 'BRAVA', 60000, DATE '1999-11-30', 25000, 5, 'FALSE'));
INSERT INTO AUTA VALUES (AUTO_CIEZAROWE('FIAT', 'BRAVA', 1000000, DATE '1999-11-30', 25000, 12));
INSERT INTO AUTA VALUES (AUTO_CIEZAROWE('FIAT2', 'BRAVA', 1000000, DATE '1999-11-30', 25000, 8));

SELECT MARKA, A.WARTOSC() FROM AUTA A;        
